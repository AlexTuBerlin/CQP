{
  "version": 3,
  "sources": ["../codemirror/addon/hint/sql-hint.js", "dep:codemirror_addon_hint_sql-hint_js"],
  "sourcesContent": ["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../mode/sql/sql\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../mode/sql/sql\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var tables;\n  var defaultTable;\n  var keywords;\n  var identifierQuote;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos, cmpPos = CodeMirror.cmpPos;\n\n  function isArray(val) { return Object.prototype.toString.call(val) == \"[object Array]\" }\n\n  function getKeywords(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).keywords;\n  }\n\n  function getIdentifierQuote(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).identifierQuote || \"`\";\n  }\n\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {columns: value}\n    if (!value.text) value.text = name\n    return value\n  }\n\n  function parseTables(input) {\n    var result = {}\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i]\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item)\n      }\n    } else if (input) {\n      for (var name in input)\n        result[name.toUpperCase()] = wrapTable(name, input[name])\n    }\n    return result\n  }\n\n  function getTable(name) {\n    return tables[name.toUpperCase()]\n  }\n\n  function shallowClone(object) {\n    var result = {};\n    for (var key in object) if (object.hasOwnProperty(key))\n      result[key] = object[key];\n    return result;\n  }\n\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++)\n        if (match(search, wordlist[i])) result.push(formatter(wordlist[i]))\n    } else {\n      for (var word in wordlist) if (wordlist.hasOwnProperty(word)) {\n        var val = wordlist[word]\n        if (!val || val === true)\n          val = word\n        else\n          val = val.displayText ? {text: val.text, displayText: val.displayText} : val.text\n        if (match(search, val)) result.push(formatter(val))\n      }\n    }\n  }\n\n  function cleanName(name) {\n    // Get rid name from identifierQuote and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    }\n    // replace duplicated identifierQuotes with single identifierQuotes\n    // and remove single identifierQuotes\n    var nameParts = name.split(identifierQuote+identifierQuote);\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = nameParts[i].replace(new RegExp(identifierQuote,\"g\"), \"\");\n    return nameParts.join(identifierQuote);\n  }\n\n  function insertIdentifierQuotes(name) {\n    var nameParts = getText(name).split(\".\");\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = identifierQuote +\n        // duplicate identifierQuotes\n        nameParts[i].replace(new RegExp(identifierQuote,\"g\"), identifierQuote+identifierQuote) +\n        identifierQuote;\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useIdentifierQuotes = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n    while (cont) {\n      cont = (token.string.charAt(0) == \".\");\n      useIdentifierQuotes = useIdentifierQuotes || (token.string.charAt(0) == identifierQuote);\n\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    }\n\n    // Try to complete table names\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns from defaultTable\n    addMatches(result, string, defaultTable, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n\n    var alias = false;\n    var aliasTable = table;\n    // Check if table is available. If not, find table by Alias\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n\n    var columns = getTable(table);\n    if (columns && columns.columns)\n      columns = columns.columns;\n\n    if (columns) {\n      addMatches(result, string, columns, function(w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n        return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n      });\n    }\n\n    return start;\n  }\n\n  function eachWord(lineText, f) {\n    var words = lineText.split(/\\s+/)\n    for (var i = 0; i < words.length; i++)\n      if (words[i]) f(words[i].replace(/[`,;]/g, ''))\n  }\n\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    };\n\n    //add separator\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n    while(indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator+1);\n    }\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length));\n\n    //find valid range\n    var prevItem = null;\n    var current = editor.getCursor()\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {start: prevItem, end: separator[i]};\n        break;\n      }\n      prevItem = separator[i];\n    }\n\n    if (validRange.start) {\n      var query = doc.getRange(validRange.start, validRange.end, false);\n\n      for (var i = 0; i < query.length; i++) {\n        var lineText = query[i];\n        eachWord(lineText, function(word) {\n          var wordUpperCase = word.toUpperCase();\n          if (wordUpperCase === aliasUpperCase && getTable(previousWord))\n            table = previousWord;\n          if (wordUpperCase !== CONS.ALIAS_KEYWORD)\n            previousWord = word;\n        });\n        if (table) break;\n      }\n    }\n    return table;\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"sql\", function(editor, options) {\n    tables = parseTables(options && options.tables)\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n    identifierQuote = getIdentifierQuote(editor);\n\n    if (defaultTableName && !defaultTable)\n      defaultTable = findTableByAlias(defaultTableName, editor);\n\n    defaultTable = defaultTable || [];\n\n    if (defaultTable.columns)\n      defaultTable = defaultTable.columns;\n\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur), start, end, search;\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    if (token.string.match(/^[.`\"'\\w@][\\w$#]*$/g)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n    if (search.charAt(0) == \".\" || search.charAt(0) == identifierQuote) {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      var objectOrClass = function(w, className) {\n        if (typeof w === \"object\") {\n          w.className = className;\n        } else {\n          w = { text: w, className: className };\n        }\n        return w;\n      };\n    addMatches(result, search, defaultTable, function(w) {\n        return objectOrClass(w, \"CodeMirror-hint-table CodeMirror-hint-default-table\");\n    });\n    addMatches(\n        result,\n        search,\n        tables, function(w) {\n          return objectOrClass(w, \"CodeMirror-hint-table\");\n        }\n    );\n    if (!disableKeywords)\n      addMatches(result, search, keywords, function(w) {\n          return objectOrClass(w.toUpperCase(), \"CodeMirror-hint-keyword\");\n      });\n  }\n\n    return {list: result, from: Pos(cur.line, start), to: Pos(cur.line, end)};\n  });\n});\n", "export default require(\"./node_modules/codemirror/addon/hint/sql-hint.js\");"],
  "mappings": "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",
  "names": []
}
